/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_types.h"
#include "xil_printf.h"
#include "xparameters.h"

volatile uint32_t* target_data = (uint32_t*)(XPAR_GPIO_1_BASEADDR);
volatile uint32_t* servo_data = (uint32_t*)(XPAR_GPIO_0_BASEADDR);

uint32_t tarX;
uint16_t tarY;
float servoX = 45;
float servoY = 45;
uint32_t servo_out = (45 << 16) + 45;
int errorX, prevErrorX;
float dErrorX;
int errorY, prevErrorY;
float dErrorY;
float stepX;
float stepY;

const float kp = 0.00001;
const float ki = 0;
const float kd = 0.00001;

#define UART_BAUD 115200
int main()
{
    init_platform();
    while(1) {
    	tarX = *target_data >> 16;
    	tarY = *target_data & 0xFFFF;

    	errorX = tarX;
    	errorX -= 320;
    	errorX *= 1;
		errorY = tarY;
		errorY -= 240;
		errorY *= -1;

		dErrorX = errorX - prevErrorX;
		dErrorY = errorY - prevErrorY;

    	stepX = kp*errorX + kd*dErrorY;
    	stepY = kp*errorY + kd*dErrorX;

		//step servo accumulators
    	servoX += stepX;
    	servoY += stepY;

		//enforce end stops
		if(servoX > 90)
			servoX = 90;
		if(servoX < 0)
			servoX = 0;
		if(servoY > 90)
			servoY = 90;
		if(servoY < 0)
			servoY = 0;
		servo_out = (((int)servoX) << 16) + (int)servoY;
		*servo_data = servo_out;

		//step error derivative
		prevErrorX = errorX;
		prevErrorY = errorY;
    }
    cleanup_platform();
    return 0;
}
